# https://github.com/Travis90x/TwoTrees-Sapphire-Plus-SP5/blob/default/Klipper-Firmware/macro.cfg

# Convert Marlin linear advance (M900) commands to Klipper (SET_PRESSURE_ADVANCE) commands.
# For use with Marlin's linear advance calibration: https://marlinfw.org/tools/lin_advance/k-factor.html




[gcode_macro SILENT_MODE] # Test Filament runout sensor
gcode:
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL=250
    SET_VELOCITY_LIMIT ACCEL=500
    SET_VELOCITY_LIMIT VELOCITY=50


######################################################################
#  ███████╗██╗██╗      █████╗ ███╗   ███╗███████╗███╗   ██╗████████╗
#  ██╔════╝██║██║     ██╔══██╗████╗ ████║██╔════╝████╗  ██║╚══██╔══╝
#  █████╗  ██║██║     ███████║██╔████╔██║█████╗  ██╔██╗ ██║   ██║   
#  ██╔══╝  ██║██║     ██╔══██║██║╚██╔╝██║██╔══╝  ██║╚██╗██║   ██║   
#  ██║     ██║███████╗██║  ██║██║ ╚═╝ ██║███████╗██║ ╚████║   ██║   
#  ╚═╝     ╚═╝╚══════╝╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝╚═╝  ╚═══╝   ╚═╝   
#  
# Filament Sensor / Change
######################################################################



[filament_switch_sensor sensore_filamento]
switch_pin: !PA2
pause_on_runout: False
event_delay: 3.0
pause_delay: 0.5
###########
runout_gcode:

    M117 FILAMENTO TERMINATO!!!
    M300 # beep
   # M600
    {% set speed = params.SPEED|default(500) %}
    G91
    G92 E0
    G1 E40 F{speed}
    G90
    PAUSE
###########
insert_gcode:
    # LOAD_FILAMENT
    {% set speed = params.SPEED|default(500) %}
    G91
    G92 E0
    G1 E-40 F{speed}
    G90
   


# event_delay: 3.0 # seconds
## The minimum amount of time in seconds to delay between events
## Events triggered during this time period will be silently ignored

pause_delay: 0.0001
## The amount of time to delay, in seconds, between the pause command dispatch and execution of the runout_gcode. 
#  it won't execute the CHANGE_FILAMENT script if the filament sensor pauses it first. I also recommend a very short pause_delay: 0.0001

# [filament_motion_sensor sensor_encoder]
# detection_length: 7.0
#   The minimum length of filament pulled through the sensor to trigger
#   a state change on the switch_pin
#   Default is 7 mm.
#extruder:
#   The name of the extruder section this sensor is associated with.
#   This parameter must be provided.
#switch_pin:
#pause_on_runout:
#runout_gcode:
#insert_gcode:
#event_delay:
#pause_delay:
#   See the "filament_switch_sensor" section for a description of the
#   above parameters.



[gcode_macro SENS_FILO] # Test Filament runout sensor
gcode:
    QUERY_FILAMENT_SENSOR SENSOR=sensore_filamento


# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[gcode_macro M600] # 1 CAMBIA FILO - in Cura use "Pause at height" Griffin method, G-code Before M600
gcode:
      SET_GCODE_VARIABLE MACRO=CHANGE_FILAMENT VARIABLE=enabled VALUE=1
     {% if printer.idle_timeout.state == 'Printing' %} #  check to prevent being called a second time after the filament is removed.
    PAUSE
    CHANGE_FILAMENT
    {% else %}
     {printer.gcode.action_respond_info("action:pause")}
    CHANGE_FILAMENT
     {% endif %}


[gcode_macro CHANGE_FILAMENT] # 2 CAMBIA FILO   # SHERPA MINI
variable_enabled: 0
gcode:
      {% if printer["gcode_macro CHANGE_FILAMENT"].enabled %}
    PAUSE
    UNLOAD_FILAMENT
    # Change the filament
      {% endif %}
      SET_GCODE_VARIABLE MACRO=CHANGE_FILAMENT VARIABLE=enabled VALUE=0

[gcode_macro LOAD_FILAMENT]  # SHERPA MINI
gcode:
    M117 CARICAMENTO FILAMENTO... 
    {% set speed = params.SPEED|default(500) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=load_state
    M300 # beep
    G91
    G92 E0
    G1 E40 F{speed} # meter/seconds - slow-load, set the E distance in mm from the extruder to the hotend (You can change the value in the menu)
    G1 E75 F{max_velocity} # purge at max extrution velocity
    M300
    M300
    M117 FILAMENTO CARICATO E SPURGATO... PULIRE IL NOZZLE!
    RESTORE_GCODE_STATE NAME=load_state


[gcode_macro M701]  # Carica filamento durante la stampa
gcode:
  {% set default_u = 100 %}

  {% if 'save_variables' in printer %}
    {% set svv = printer.save_variables.variables %}
    {% if 'bowden_len' in svv %}
      {% set default_u = svv.bowden_len %}
    {% endif %}
  {% endif %}

  {% set i = params.I|default(30)|float %}
  {% set i_f = params.IF|default(180)|float %}
  {% set u = params.U|default(default_u)|float %}
  {% set u_f = params.UF|default(360)|float %}
  {% set p = params.P|default(30)|float %}
  {% set p_f = params.PF|default(180)|float %}

  {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
    {action_respond_info("This command cannot be used while printing")}
  {% elif printer.extruder.temperature < 170 %}
    {action_respond_info("Extruder temperature too low")}
  {% else %}
    SAVE_GCODE_STATE NAME=M701_state
    M83
    {% if i > 0.0 %}
      G1 E{i} F{i_f}
    {% endif %}
    {% if u > 0.0 %}
      G1 E{u} F{u_f}
    {% endif %}
    {% if p > 0.0 %}
      G1 E{p} F{p_f}
    {% endif %}
    RESTORE_GCODE_STATE NAME=M701_state MOVE=0
  {% endif %}

[gcode_macro UNLOAD_FILAMENT] # 3 CAMBIA FILO  # SHERPA MINI
gcode:
    {% set speed = params.SPEED|default(500) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    # M300 # beep buzzer
    G92 E0
   # G1 E-5 F{max_velocity/2} 
    G1 E-25 F{max_velocity}  # max_velocity is max extrution velocity (not max retract velocity) it is set in printer.cfg
    G1 E-100 F{speed} # meter/seconds - fast-unload (max retract velocity - You can change the value in the menu)
    # M300
    # M300
    M117 FILAMENTO ESPULSO, RICARICARE!
    RESTORE_GCODE_STATE NAME=unload_state


[gcode_macro M702]  #  togli filamento durante la stampa
gcode:
  {% set default_u = 100 %}

  {% if 'save_variables' in printer %}
    {% set svv = printer.save_variables.variables %}
    {% if 'bowden_len' in svv %}
      {% set default_u = svv.bowden_len %}
    {% endif %}
  {% endif %}

  {% set p = params.P|default(8)|float %}
  {% set p_f = params.PF|default(180)|float %}
  {% set i = params.I|default(30)|float %}
  {% set i_f = params.IF|default(180)|float %}
  {% set u = params.U|default(default_u)|float %}
  {% set u_f = params.UF|default(360)|float %}

  {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
    {action_respond_info("This command cannot be used while printing")}
  {% elif printer.extruder.temperature < 170 %}
    {action_respond_info("Extruder temperature too low")}
  {% else %}
    SAVE_GCODE_STATE NAME=M702_state
    M83
    {% if p > 0.0 %}
      G1 E{p} F{p_f}
    {% endif %}
    {% if i > 0.0 %}
      G1 E-{i} F{i_f}
    {% endif %}
    {% if u > 0.0 %}
      G1 E-{u} F{u_f}
    {% endif %}
    RESTORE_GCODE_STATE NAME=M702_state MOVE=0
  {% endif %}


[gcode_macro M600bis]  #♣ ???
gcode:


#    {% set X = params.X|default(50)|float %}
    {% set X = printer.toolhead.axis_maximum.x|float - 1.0 %}
#    {% set Y = params.Y|default(0)|float %}
    {% set Y = printer.toolhead.axis_maximum.y|float - 1.0 %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state






[gcode_macro outoffilament]
gcode:
        {% if pause_position.x is not none %}
        # relative XYZE
        G91
        M83

        # retract filament of 0.8 mm up, move Z slightly upwards and 
        G1 Z+5 E-0.8 F4500

        # absolute XYZE
        M82
        G90

        # move to a safe rest position, adjust as necessary
        G1 X0 Y0
        {% endif %}

[gcode_macro not_outoffilament]
gcode:
        {% if pause_position.x is not none %}
        # relative extruder
        M83

        # prime nozzle
        G1 E-0.8 F4500
        G1 E0.8 F4500
        G1 E0.8 F4500

        # absolute E
        M82

        # absolute XYZ
        G90

        # reset E
        G92 E{ pause_position.e }

        # WARNING!!! - use M83 or M82(exruder absolute mode) according what your slicer generates
        M82 # extruder relative mode

        # move back to pause position XYZ
        G1 X{ pause_position.x } Y{ pause_position.y } Z{ pause_position.z } F4500

        # reset to feed rate before pause if available
        {% if pause_position.f is not none %}G1 F{ pause_position.f }{% endif %}
        {% endif %}
		


######################################################################

######################################################################

######################################################################

######################################################################

[gcode_macro V_LEFT]
gcode:
# Vai Molla 1
    G1 Z10 F1500
    G1 X35 Y190 F8000 # Y - Y_offset BLTouch
    G1 Z10 F1500
    PROBE
    G1 Z10 F1500

[gcode_macro V_RIGHT]
gcode:
# Vai Molla 1
    G1 Z10 F1500
    G1 X275 Y190 F8000 # Y - Y_offset BLTouch
    G1 Z10 F1500
    PROBE
    G1 Z10 F1500


[gcode_macro VITI]
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28
    {% endif %}
    BED_MESH_CLEAR
;Scalda BED
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60

# 1-----2
# |  X  |
# 4-----3

# Vai Molla 1
    G1 Z10 F1500
    G1 X35 Y311 F8000  # Y screw - Y_offset BLTouch
    G1 Z10 F1500
    PROBE
    G1 Z10 F1500

# Vai Molla 2
    G1 Z10 F1500
    G1 X275 Y311 F8000
    G1 Z10 F1500
    PROBE
    G1 Z10 F1500

# Vai Molla 3
    G1 Z10 F1500
    G1 X275 Y71 F8000
    G1 Z10 F1500
    PROBE
    G1 Z10 F1500

# Vai Molla4
    G1 Z10 F1500
    G1 X35 Y71 F8000
    G1 Z10 F1500
    PROBE
    G1 Z10 F1500

# Torna Molla 1
    G1 Z10 F1500
    G1 X35 Y312 F8000
    G1 Z10 F1500
    M117 Avvita per abbassare il valore




[gcode_macro V1]
gcode:
# Vai Molla 1
    G1 Z10 F1500
    G1 X35 Y311 F8000
    G1 Z10 F1500
    PROBE
    G1 Z10 F1500

[gcode_macro V2]
gcode:
# Vai Molla 2
    G1 Z10 F1500
    G1 X275 Y311 F8000
    G1 Z10 F1500
    PROBE
    G1 Z10 F1500

[gcode_macro V3]
gcode:
# Vai Molla 3
    G1 Z10 F1500
    G1 X275 Y71 F8000
    G1 Z10 F1500
    PROBE
    G1 Z10 F1500

[gcode_macro V4]
gcode:
# Vai Molla4
    G1 Z10 F1500
    G1 X35 Y71 F8000
    G1 Z10 F1500
    PROBE
    G1 Z10 F1500




[gcode_macro CENTER]
gcode:
    G91
    G0 Z10 F800
    G90
    G0 X150 Y150 F9000


[gcode_macro CLEAN]
gcode:
    PAUSE
    G91
    G0 Z100 F2000
    G90
    G0 X150 Y50 F10000



#  ██████╗ ██╗             ████████╗ ██████╗  ██████╗██╗   ██╗██╗  ██╗
#  ██╔══██╗██║             ╚══██╔══╝██╔═══██╗██╔════╝██║   ██║██║  ██║
#  ██████╔╝██║      █████╗    ██║   ██║   ██║██║     ██║   ██║███████║
#  ██╔══██╗██║      ╚════╝    ██║   ██║   ██║██║     ██║   ██║██╔══██║
#  ██████╔╝███████╗           ██║   ╚██████╔╝╚██████╗╚██████╔╝██║  ██║
#  ╚═════╝ ╚══════╝           ╚═╝    ╚═════╝  ╚═════╝ ╚═════╝ ╚═╝  ╚═╝
#   


[gcode_macro FAKE_HOMING]
gcode:
    G92
    SET_KINEMATIC_POSITION


[gcode_macro BL_PROBE]
gcode:
    G91
    G0 Z10 F1000
    G90
    PROBE

[gcode_macro BL_TEST]
gcode:
    G91
    G0 Z10 F800
    G90
    G0 X150 Y150 F9000
    PROBE_ACCURACY


[gcode_macro Pressure_ADV]
gcode:
    {% set factor_padv = params.FACTOR|default(0.005) %}
    {% set start_padv = params.START|default(0) %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL=250
    TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START={start_padv} FACTOR={factor_padv}  # Direct Drive
    #TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020  # Bowden

[gcode_macro Pressure_ADV_ASA]
gcode:
    SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE=0.11

[gcode_macro Pressure_ADV_PLA]
gcode:
    SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE=0.045

[gcode_macro PID_BED]
gcode:
    {% set temp_bed = params.TEMP|default(45) %}
    PID_CALIBRATE HEATER=heater_bed TARGET={temp_bed}

[gcode_macro PID_EXTRUDER]
gcode:
    {% set temp_extruder = params.TEMP|default(200) %}
    PID_CALIBRATE HEATER=extruder TARGET={temp_extruder}


[gcode_macro Retract]
gcode:
    G91
    G1 E-2.5 F4000
    G90

[gcode_macro G11] # Marlin compatibility
gcode:
    G91
    G1 E2.5 F1200
    G90

[gcode_macro M420]
gcode:
    G28
    BED_MESH_PROFILE LOAD="default"
   
[gcode_macro m205] # Pause from Marlin
gcode:
    G4 P0


[gcode_macro M900]
gcode:
	# Parameters
	{% set pa = params.K|float %}
	SET_PRESSURE_ADVANCE ADVANCE={pa}



[gcode_macro PURGE]
gcode:
      M117 PURGING..
      G91
      G1 E50 F250
      G90



[gcode_macro BL_RESET]
gcode:
    BLTOUCH_DEBUG COMMAND=reset



################
    
[gcode_macro M300]
gcode:  
#  {% set S = params.S|default(1000)|int %} ; S sets the tone frequency
#  {% set P = params.P|default(200)|int %} ; P sets the tone duration
#  {% set L = 0.5 %} ; L varies the PWM on time, close to 0 or 1 the tone gets a bit quieter. 0.5 is a symmetric waveform
#  {% if S <= 0 %} ; dont divide through zero
#  {% set F = 1 %}
#  {% set L = 0 %}
#  {% elif S >= 10000 %} ;max frequency set to 10kHz
#  {% set F = 0 %}
#  {% else %}
#  {% set F = 1/S %} ;convert frequency to seconds 
#  {% endif %}
#  SET_PIN PIN=BEEPER_Pin VALUE={L} CYCLE_TIME={F} ;Play tone
#  G4 P{P} ;tone duration
#  SET_PIN PIN=BEEPER_Pin VALUE=0

[gcode_macro end_tune]
gcode:
    M300 S9139 P80
    M300 S4102 P51
    M300 S4050 P747
    M300 S100 P14
    M300 S9000 P40
    M300 S0051 P333
    M300 S1000 P10
    
  SET_PIN PIN=BEEPER_Pin VALUE=0

          



# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

#  ███████╗██████╗ ███████╗███████╗██████╗ ████████╗███████╗███████╗████████╗
#  ██╔════╝██╔══██╗██╔════╝██╔════╝██╔══██╗╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝
#  ███████╗██████╔╝█████╗  █████╗  ██║  ██║   ██║   █████╗  ███████╗   ██║   
#  ╚════██║██╔═══╝ ██╔══╝  ██╔══╝  ██║  ██║   ██║   ██╔══╝  ╚════██║   ██║   
#  ███████║██║     ███████╗███████╗██████╔╝   ██║   ███████╗███████║   ██║   
#  ╚══════╝╚═╝     ╚══════╝╚══════╝╚═════╝    ╚═╝   ╚══════╝╚══════╝   ╚═╝   
#   

[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(1)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	
	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		G28
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED


#  ██████╗ ███████╗██████╗     ███╗   ███╗███████╗███████╗██╗  ██╗
#  ██╔══██╗██╔════╝██╔══██╗    ████╗ ████║██╔════╝██╔════╝██║  ██║
#  ██████╔╝█████╗  ██║  ██║    ██╔████╔██║█████╗  ███████╗███████║
#  ██╔══██╗██╔══╝  ██║  ██║    ██║╚██╔╝██║██╔══╝  ╚════██║██╔══██║
#  ██████╔╝███████╗██████╔╝    ██║ ╚═╝ ██║███████╗███████║██║  ██║
#  ╚═════╝ ╚══════╝╚═════╝     ╚═╝     ╚═╝╚══════╝╚══════╝╚═╝  ╚═╝
#                                                                 

[gcode_macro BL_DOWN]
gcode:
  BLTOUCH_DEBUG COMMAND=pin_down

[gcode_macro BL_UP]
gcode:
  BLTOUCH_DEBUG COMMAND=pin_up

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 3
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
; enable preference index
variable_enable_reference_index : False
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "lagrange" %}
            {% if "algorithm" in bedMeshConfig and meshPointX >=4 and meshPointY >=4 %}
                {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}





###########################♦

# Cancel object (aka Marlin/RRF M486 commands) support
#
# Enable object exclusion
[exclude_object]

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}
