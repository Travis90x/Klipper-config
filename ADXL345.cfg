# This file contains an example configuration with RPi as secondary mcu
# See docs/Config_Reference.md for a description of parameters.
############################################
#
#  ████████╗███████╗███████╗████████╗███████╗
#  ╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝██╔════╝
#     ██║   █████╗  ███████╗   ██║   ███████╗
#     ██║   ██╔══╝  ╚════██║   ██║   ╚════██║
#     ██║   ███████╗███████║   ██║   ███████║
#     ╚═╝   ╚══════╝╚══════╝   ╚═╝   ╚══════╝
#   


    
[resonance_tester]
accel_chip: adxl345
probe_points: 150, 150, 20  # an example of the center of the bed, check yours
min_freq: 25
# max_freq: 125

##  Damping ratios of vibrations of X and Y axes used by input shapers
##  to improve vibration suppression. Default value is 0.1 which is a
##  good all-round value for most printers. In most circumstances this
##  parameter requires no tuning and should not be changed.
#damping_ratio_x: 0.1
#damping_ratio_y: 0.1

#############################################
#   
#  ███╗   ███╗ ██████╗██╗   ██╗
#  ████╗ ████║██╔════╝██║   ██║
#  ██╔████╔██║██║     ██║   ██║
#  ██║╚██╔╝██║██║     ██║   ██║
#  ██║ ╚═╝ ██║╚██████╗╚██████╔╝
#  ╚═╝     ╚═╝ ╚═════╝ ╚═════╝ 
#                                
# 

# RP2040 micro-controller will be used to control the accelerometer.
[mcu RP2040]
baud: 115200  # 250000
restart_method: command
serial: /dev/serial/by-id/usb-Klipper_rp2040_E66138935F717729-if00  # Generic 03H
  #  serial: /dev/serial/by-id/usb-Klipper_rp2040_E66138935F225928-if00

  # Check with MACRO "USB" including shell_command.cfg
  # otherwise, to find correct usb, in command type: ls /dev/serial/by-id/*
  # sudo cp out/klipper.uf2 /media/pi/RPI-RP2/



# [output_pin pico_led]
# pin: RP2040:gpio16
# pwm: True
# cycle_time: 0.100
# hardware_pwm: True
# value: 1
# shutdown_value: 0


# RASPBERRY microcontroller is used as secondary.
# [mcu rpi]
# serial: /tmp/klipper_host_mcu
# baud: 250000
# restart_method: rpi_usb


#   █████╗ ██████╗ ██╗  ██╗██╗     ██████╗ ██╗  ██╗███████╗
#  ██╔══██╗██╔══██╗╚██╗██╔╝██║     ╚════██╗██║  ██║██╔════╝
#  ███████║██║  ██║ ╚███╔╝ ██║      █████╔╝███████║███████╗
#  ██╔══██║██║  ██║ ██╔██╗ ██║      ╚═══██╗╚════██║╚════██║
#  ██║  ██║██████╔╝██╔╝ ██╗███████╗██████╔╝     ██║███████║
#  ╚═╝  ╚═╝╚═════╝ ╚═╝  ╚═╝╚══════╝╚═════╝      ╚═╝╚══════╝
#                                                         
#                                                      

[adxl345]
axes_map: x,z,y   #  Installed with vertical ADXL  # For Diamond in X, y, z

 # RP2040
cs_pin: RP2040:gpio1 #RP2040:gpio1
spi_bus: spi0a # spi0a  
  
# ROBIN Nano 1.2 SDCARD connected  to ADXL345
# cs_pin: PC8
# spi_software_miso_pin: PC9
# spi_software_sclk_pin: PC10
# spi_software_mosi_pin: PC11

# RASPBERRY
# cs_pin: rpi:None


#     [adxl3452]  #  a sencod ADXL345 on RP2040, ex: for the bed
 # spi_bus: spi0b
 # cs_pin: RP2040:gpio5

#     [adxl345]  #  a third ADXL345 on RP2040, ex: for the chassis
#     spi_bus: spi1a
#     cs_pin: RP2040:gpio9

#############################################
# 
#  ███╗   ███╗ █████╗  ██████╗██████╗  ██████╗ 
#  ████╗ ████║██╔══██╗██╔════╝██╔══██╗██╔═══██╗
#  ██╔████╔██║███████║██║     ██████╔╝██║   ██║
#  ██║╚██╔╝██║██╔══██║██║     ██╔══██╗██║   ██║
#  ██║ ╚═╝ ██║██║  ██║╚██████╗██║  ██║╚██████╔╝
#  ╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝ ╚═════╝ 
#                                              
# 

[gcode_macro LOOP]
gcode:
    G4 P3000
    LOOP

[gcode_macro ADX]
gcode:
    ACCELEROMETER_QUERY  # check ADXL345


# Useful to skip the first read error on ADXL345
[delayed_gcode _Resonance]
initial_duration: 1.0
gcode:
    ACCELEROMETER_QUERY  # check ADXL345
[delayed_gcode _Resonance2]
initial_duration: 2.0
gcode:
    ACCELEROMETER_QUERY  

#############################################

[gcode_macro ADXL_Shaping]
gcode:
    ACCELEROMETER_QUERY
    G28
    TEST_RESONANCES AXIS=X
    G4 P10000
    ACCELEROMETER_QUERY
    TEST_RESONANCES AXIS=Y
    G4 P10000   # time required to write the file before start script
    RUN_SHELL_COMMAND CMD=shaper_calibrate_x
    G4 P15000
    RUN_SHELL_COMMAND CMD=shaper_calibrate_y

[gcode_macro ADXL_Shaping_X]
gcode:
    ACCELEROMETER_QUERY
    G28
    TEST_RESONANCES AXIS=X
    G4 P15000   # time required to write the file before start script
    RUN_SHELL_COMMAND CMD=shaper_calibrate_x

[gcode_macro ADXL_Shaping_Y]
gcode:
    ACCELEROMETER_QUERY
    G28
    TEST_RESONANCES AXIS=Y
    G4 P15000
    RUN_SHELL_COMMAND CMD=shaper_calibrate_y

#############################################

[gcode_macro ADXL_Belts]
gcode:
    ACCELEROMETER_QUERY
    G28
    TEST_RESONANCES AXIS=1,1 OUTPUT=raw_data
    G4 P5000
    ACCELEROMETER_QUERY
    TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data
    G4 P5000
    RUN_SHELL_COMMAND CMD=shell_calc_belt


#############################################
#
#  ███╗   ██╗███████╗ ██████╗ ██████╗ ██╗██╗  ██╗███████╗██╗     
#  ████╗  ██║██╔════╝██╔═══██╗██╔══██╗██║╚██╗██╔╝██╔════╝██║     
#  ██╔██╗ ██║█████╗  ██║   ██║██████╔╝██║ ╚███╔╝ █████╗  ██║     
#  ██║╚██╗██║██╔══╝  ██║   ██║██╔═══╝ ██║ ██╔██╗ ██╔══╝  ██║     
#  ██║ ╚████║███████╗╚██████╔╝██║     ██║██╔╝ ██╗███████╗███████╗
#  ╚═╝  ╚═══╝╚══════╝ ╚═════╝ ╚═╝     ╚═╝╚═╝  ╚═╝╚══════╝╚══════╝
#                                                                 
#

# [include progress.cfg]

[neopixel pico_led]
pin: RP2040:gpio16
chain_count:   1 #how many led
color_order: GRB
initial_RED: 0.0
initial_BLUE: 1.0
initial_GREEN: 0.0

[gcode_macro neo_t]
  gcode:
    NEOPIXEL_DISPLAY LED="pico_led" TYPE=extruder_temp MODE=glow

[gcode_macro neo_%]
  gcode:
    NEOPIXEL_DISPLAY LED="pico_led" TYPE=print_percent MODE=progress
# This macro command will show print completion in progress mode.

[gcode_macro neo_bar]
  gcode:
    NEOPIXEL_DISPLAY LED="pico_led" TYPE=print_speed MODE=progress

# cycle_time: 0.010
# cycle_time: 0.100
#   The amount of time (in seconds) per PWM cycle. It is recommended
#   this be 10 milliseconds or greater when using software based PWM.
#   The default is 0.100 seconds for pwm pins.

#hardware_pwm: False
#   Enable this to use hardware PWM instead of software PWM. When
#   using hardware PWM the actual cycle time is constrained by the
#   implementation and may be significantly different than the
#   requested cycle_time. The default is False.


# [led_effect panel_idle]
# autostart:              true
# frame_rate:             24
# leds:
    # neopixel:pico_led
# layers:
    # breathing  10 1 top (.5,.5,1)


# [gcode_macro blink_led]
  # description: Blink my_led one time
  # gcode:
    # SET_PIN PIN=pico_led VALUE=1  # If unknown commad, it needs  [output_pin XXX] config section enabled
    # G4 P2000
    # SET_PIN PIN=pico_led VALUE=0

# [gcode_macro LEDOFF]
  # gcode:
    # SET_PIN PIN=pico_led VALUE=0

# [gcode_macro LEDMIN]
#  gcode:
    # # SET_PIN PIN=pico_led VALUE=.5

# [gcode_macro LEDMAX]
  # gcode:
    # SET_PIN PIN=pico_led VALUE=1


# Example1: A led strip controlled by the GPIO20 on the RPi
# [output_pin caselight]
# pin: host:gpio20
# You can also write the pin in extended form by specifying
# the reference gpiochip.
# pin: host:gpiochip0/gpio20

# [gcode_macro TOGGLE_CASELIGHT]
# gcode:
#    SET_PIN PIN=caselight VALUE={(not printer['output_pin caselight'].value)|int}


# Example2: Using the i2c bus of the RPi to read a sensor
# [temperature_sensor enclosure_temp]
# sensor_type: HTU21D
# i2c_mcu: host
# i2c_bus: i2c.1
# htu21d_hold_master: False

# [gcode_macro QUERY_ENCLOSURE]
# gcode:
#  {% set sensor = printer["htu21d enclosure_temp"] %}
# {action_respond_info(
#    "Temperature: %.2f C\n"
#     "Humidity: %.2f%%" % (
#            sensor.temperature,
#            sensor.humidity))}

# Example 3:Using a pin on another gpiochip connected to the RPi
# (in this case on an MCP23017)
# [fan]
# pin: host:gpiochip2/gpio7
